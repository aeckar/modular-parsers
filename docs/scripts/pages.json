[{"name":"abstract class NameableSymbol<InheritorT : NameableSymbol<InheritorT>> : Symbol","description":"io.github.aeckar.parsing.NameableSymbol","location":"core/io.github.aeckar.parsing/-nameable-symbol/index.html","searchKeys":["NameableSymbol","abstract class NameableSymbol<InheritorT : NameableSymbol<InheritorT>> : Symbol","io.github.aeckar.parsing.NameableSymbol"]},{"name":"abstract class SimplePivotIterator<T> : PivotIterator<T> ","description":"io.github.aeckar.parsing.utils.SimplePivotIterator","location":"core/io.github.aeckar.parsing.utils/-simple-pivot-iterator/index.html","searchKeys":["SimplePivotIterator","abstract class SimplePivotIterator<T> : PivotIterator<T> ","io.github.aeckar.parsing.utils.SimplePivotIterator"]},{"name":"abstract class Symbol : ParserComponent","description":"io.github.aeckar.parsing.Symbol","location":"core/io.github.aeckar.parsing/-symbol/index.html","searchKeys":["Symbol","abstract class Symbol : ParserComponent","io.github.aeckar.parsing.Symbol"]},{"name":"abstract class TypeSafeJunction<InheritorT : TypeSafeJunction<InheritorT>> : TypeSafeSymbol<ImplicitJunction<InheritorT>, InheritorT> ","description":"io.github.aeckar.parsing.typesafe.TypeSafeJunction","location":"core/io.github.aeckar.parsing.typesafe/-type-safe-junction/index.html","searchKeys":["TypeSafeJunction","abstract class TypeSafeJunction<InheritorT : TypeSafeJunction<InheritorT>> : TypeSafeSymbol<ImplicitJunction<InheritorT>, InheritorT> ","io.github.aeckar.parsing.typesafe.TypeSafeJunction"]},{"name":"abstract class TypeSafeSequence<InheritorT : TypeSafeSequence<InheritorT>> : TypeSafeSymbol<ImplicitSequence<InheritorT>, InheritorT> ","description":"io.github.aeckar.parsing.typesafe.TypeSafeSequence","location":"core/io.github.aeckar.parsing.typesafe/-type-safe-sequence/index.html","searchKeys":["TypeSafeSequence","abstract class TypeSafeSequence<InheritorT : TypeSafeSequence<InheritorT>> : TypeSafeSymbol<ImplicitSequence<InheritorT>, InheritorT> ","io.github.aeckar.parsing.typesafe.TypeSafeSequence"]},{"name":"abstract class TypeSafeSymbol<TypeUnsafeT : TypeUnsafeSymbol<InheritorT, TypeUnsafeT>, InheritorT : TypeSafeSymbol<TypeUnsafeT, InheritorT>> : NameableSymbol<InheritorT> ","description":"io.github.aeckar.parsing.typesafe.TypeSafeSymbol","location":"core/io.github.aeckar.parsing.typesafe/-type-safe-symbol/index.html","searchKeys":["TypeSafeSymbol","abstract class TypeSafeSymbol<TypeUnsafeT : TypeUnsafeSymbol<InheritorT, TypeUnsafeT>, InheritorT : TypeSafeSymbol<TypeUnsafeT, InheritorT>> : NameableSymbol<InheritorT> ","io.github.aeckar.parsing.typesafe.TypeSafeSymbol"]},{"name":"abstract fun advance(places: Int)","description":"io.github.aeckar.parsing.utils.PivotIterator.advance","location":"core/io.github.aeckar.parsing.utils/-pivot-iterator/advance.html","searchKeys":["advance","abstract fun advance(places: Int)","io.github.aeckar.parsing.utils.PivotIterator.advance"]},{"name":"abstract fun init(initializer: (ArgumentT) -> Unit)","description":"io.github.aeckar.parsing.UnaryParserDefinition.init","location":"core/io.github.aeckar.parsing/-unary-parser-definition/init.html","searchKeys":["init","abstract fun init(initializer: (ArgumentT) -> Unit)","io.github.aeckar.parsing.UnaryParserDefinition.init"]},{"name":"abstract fun nextChar(): Char","description":"io.github.aeckar.parsing.utils.CharPivotIterator.nextChar","location":"core/io.github.aeckar.parsing.utils/-char-pivot-iterator/next-char.html","searchKeys":["nextChar","abstract fun nextChar(): Char","io.github.aeckar.parsing.utils.CharPivotIterator.nextChar"]},{"name":"abstract fun parse(input: RawSource): Node<*>?","description":"io.github.aeckar.parsing.Parser.parse","location":"core/io.github.aeckar.parsing/-parser/parse.html","searchKeys":["parse","abstract fun parse(input: RawSource): Node<*>?","io.github.aeckar.parsing.Parser.parse"]},{"name":"abstract fun parse(input: String): Node<*>?","description":"io.github.aeckar.parsing.Parser.parse","location":"core/io.github.aeckar.parsing/-parser/parse.html","searchKeys":["parse","abstract fun parse(input: String): Node<*>?","io.github.aeckar.parsing.Parser.parse"]},{"name":"abstract fun peek(): ElementT","description":"io.github.aeckar.parsing.utils.PivotIterator.peek","location":"core/io.github.aeckar.parsing.utils/-pivot-iterator/peek.html","searchKeys":["peek","abstract fun peek(): ElementT","io.github.aeckar.parsing.utils.PivotIterator.peek"]},{"name":"abstract fun peekChar(): Char","description":"io.github.aeckar.parsing.utils.CharPivotIterator.peekChar","location":"core/io.github.aeckar.parsing.utils/-char-pivot-iterator/peek-char.html","searchKeys":["peekChar","abstract fun peekChar(): Char","io.github.aeckar.parsing.utils.CharPivotIterator.peekChar"]},{"name":"abstract fun removeSave()","description":"io.github.aeckar.parsing.utils.PivotIterator.removeSave","location":"core/io.github.aeckar.parsing.utils/-pivot-iterator/remove-save.html","searchKeys":["removeSave","abstract fun removeSave()","io.github.aeckar.parsing.utils.PivotIterator.removeSave"]},{"name":"abstract fun revert()","description":"io.github.aeckar.parsing.utils.PivotIterator.revert","location":"core/io.github.aeckar.parsing.utils/-pivot-iterator/revert.html","searchKeys":["revert","abstract fun revert()","io.github.aeckar.parsing.utils.PivotIterator.revert"]},{"name":"abstract fun save()","description":"io.github.aeckar.parsing.utils.PivotIterator.save","location":"core/io.github.aeckar.parsing.utils/-pivot-iterator/save.html","searchKeys":["save","abstract fun save()","io.github.aeckar.parsing.utils.PivotIterator.save"]},{"name":"abstract fun tokenize(input: RawSource): List<Token>","description":"io.github.aeckar.parsing.Lexer.tokenize","location":"core/io.github.aeckar.parsing/-lexer/tokenize.html","searchKeys":["tokenize","abstract fun tokenize(input: RawSource): List<Token>","io.github.aeckar.parsing.Lexer.tokenize"]},{"name":"abstract fun tokenize(input: String): List<Token>","description":"io.github.aeckar.parsing.Lexer.tokenize","location":"core/io.github.aeckar.parsing/-lexer/tokenize.html","searchKeys":["tokenize","abstract fun tokenize(input: String): List<Token>","io.github.aeckar.parsing.Lexer.tokenize"]},{"name":"abstract infix fun <MatchT : NameableSymbol<MatchT>> UnaryForeignSymbol<MatchT, in ArgumentT>.extendsListener(action: UnarySymbolListener<MatchT, ArgumentT>)","description":"io.github.aeckar.parsing.UnaryParserDefinition.extendsListener","location":"core/io.github.aeckar.parsing/-unary-parser-definition/extends-listener.html","searchKeys":["extendsListener","abstract infix fun <MatchT : NameableSymbol<MatchT>> UnaryForeignSymbol<MatchT, in ArgumentT>.extendsListener(action: UnarySymbolListener<MatchT, ArgumentT>)","io.github.aeckar.parsing.UnaryParserDefinition.extendsListener"]},{"name":"abstract infix fun <MatchT : NameableSymbol<out MatchT>> NamedSymbol<out MatchT>.listener(action: NullarySymbolListener<MatchT>)","description":"io.github.aeckar.parsing.NullaryParserDefinition.listener","location":"core/io.github.aeckar.parsing/-nullary-parser-definition/listener.html","searchKeys":["listener","abstract infix fun <MatchT : NameableSymbol<out MatchT>> NamedSymbol<out MatchT>.listener(action: NullarySymbolListener<MatchT>)","io.github.aeckar.parsing.NullaryParserDefinition.listener"]},{"name":"abstract infix fun <MatchT : NameableSymbol<out MatchT>> NamedSymbol<out MatchT>.listener(action: UnarySymbolListener<MatchT, ArgumentT>)","description":"io.github.aeckar.parsing.UnaryParserDefinition.listener","location":"core/io.github.aeckar.parsing/-unary-parser-definition/listener.html","searchKeys":["listener","abstract infix fun <MatchT : NameableSymbol<out MatchT>> NamedSymbol<out MatchT>.listener(action: UnarySymbolListener<MatchT, ArgumentT>)","io.github.aeckar.parsing.UnaryParserDefinition.listener"]},{"name":"abstract infix fun <MatchT : NameableSymbol<out MatchT>> NullaryForeignSymbol<out MatchT>.extendsListener(action: NullarySymbolListener<MatchT>)","description":"io.github.aeckar.parsing.NullaryParserDefinition.extendsListener","location":"core/io.github.aeckar.parsing/-nullary-parser-definition/extends-listener.html","searchKeys":["extendsListener","abstract infix fun <MatchT : NameableSymbol<out MatchT>> NullaryForeignSymbol<out MatchT>.extendsListener(action: NullarySymbolListener<MatchT>)","io.github.aeckar.parsing.NullaryParserDefinition.extendsListener"]},{"name":"abstract infix fun <MatchT : NameableSymbol<out MatchT>> NullaryForeignSymbol<out MatchT>.extendsListener(action: UnarySymbolListener<MatchT, ArgumentT>)","description":"io.github.aeckar.parsing.UnaryParserDefinition.extendsListener","location":"core/io.github.aeckar.parsing/-unary-parser-definition/extends-listener.html","searchKeys":["extendsListener","abstract infix fun <MatchT : NameableSymbol<out MatchT>> NullaryForeignSymbol<out MatchT>.extendsListener(action: UnarySymbolListener<MatchT, ArgumentT>)","io.github.aeckar.parsing.UnaryParserDefinition.extendsListener"]},{"name":"abstract inner class SymbolImport<ForeignT : ForeignSymbol<*>> : Nameable","description":"io.github.aeckar.parsing.ParserDefinition.SymbolImport","location":"core/io.github.aeckar.parsing/-parser-definition/-symbol-import/index.html","searchKeys":["SymbolImport","abstract inner class SymbolImport<ForeignT : ForeignSymbol<*>> : Nameable","io.github.aeckar.parsing.ParserDefinition.SymbolImport"]},{"name":"abstract operator fun Node<MatchT>.invoke()","description":"io.github.aeckar.parsing.NullarySymbolListener.invoke","location":"core/io.github.aeckar.parsing/-nullary-symbol-listener/invoke.html","searchKeys":["invoke","abstract operator fun Node<MatchT>.invoke()","io.github.aeckar.parsing.NullarySymbolListener.invoke"]},{"name":"abstract operator fun Node<MatchT>.invoke(argument: ArgumentT)","description":"io.github.aeckar.parsing.UnarySymbolListener.invoke","location":"core/io.github.aeckar.parsing/-unary-symbol-listener/invoke.html","searchKeys":["invoke","abstract operator fun Node<MatchT>.invoke(argument: ArgumentT)","io.github.aeckar.parsing.UnarySymbolListener.invoke"]},{"name":"abstract operator fun getValue(thisRef: Any?, property: KProperty<*>): Named","description":"io.github.aeckar.parsing.utils.Nameable.getValue","location":"core/io.github.aeckar.parsing.utils/-nameable/get-value.html","searchKeys":["getValue","abstract operator fun getValue(thisRef: Any?, property: KProperty<*>): Named","io.github.aeckar.parsing.utils.Nameable.getValue"]},{"name":"abstract operator override fun getValue(thisRef: Any?, property: KProperty<*>): ForeignT","description":"io.github.aeckar.parsing.ParserDefinition.SymbolImport.getValue","location":"core/io.github.aeckar.parsing/-parser-definition/-symbol-import/get-value.html","searchKeys":["getValue","abstract operator override fun getValue(thisRef: Any?, property: KProperty<*>): ForeignT","io.github.aeckar.parsing.ParserDefinition.SymbolImport.getValue"]},{"name":"abstract val name: String","description":"io.github.aeckar.parsing.utils.Named.name","location":"core/io.github.aeckar.parsing.utils/-named/name.html","searchKeys":["name","abstract val name: String","io.github.aeckar.parsing.utils.Named.name"]},{"name":"abstract val symbols: Map<String, NameableSymbol<*>>","description":"io.github.aeckar.parsing.Parser.symbols","location":"core/io.github.aeckar.parsing/-parser/symbols.html","searchKeys":["symbols","abstract val symbols: Map<String, NameableSymbol<*>>","io.github.aeckar.parsing.Parser.symbols"]},{"name":"class IllegalTokenException : Exception","description":"io.github.aeckar.parsing.IllegalTokenException","location":"core/io.github.aeckar.parsing/-illegal-token-exception/index.html","searchKeys":["IllegalTokenException","class IllegalTokenException : Exception","io.github.aeckar.parsing.IllegalTokenException"]},{"name":"class ImplicitJunction<TypeSafeT : TypeSafeJunction<TypeSafeT>> : TypeUnsafeSymbol<TypeSafeT, ImplicitJunction<TypeSafeT>> ","description":"io.github.aeckar.parsing.ImplicitJunction","location":"core/io.github.aeckar.parsing/-implicit-junction/index.html","searchKeys":["ImplicitJunction","class ImplicitJunction<TypeSafeT : TypeSafeJunction<TypeSafeT>> : TypeUnsafeSymbol<TypeSafeT, ImplicitJunction<TypeSafeT>> ","io.github.aeckar.parsing.ImplicitJunction"]},{"name":"class ImplicitSequence<TypeSafeT : TypeSafeSequence<TypeSafeT>> : TypeUnsafeSymbol<TypeSafeT, ImplicitSequence<TypeSafeT>> ","description":"io.github.aeckar.parsing.ImplicitSequence","location":"core/io.github.aeckar.parsing/-implicit-sequence/index.html","searchKeys":["ImplicitSequence","class ImplicitSequence<TypeSafeT : TypeSafeSequence<TypeSafeT>> : TypeUnsafeSymbol<TypeSafeT, ImplicitSequence<TypeSafeT>> ","io.github.aeckar.parsing.ImplicitSequence"]},{"name":"class Inversion(exclusion: NamedSymbol<*>) : SimpleSymbol<Inversion> ","description":"io.github.aeckar.parsing.Inversion","location":"core/io.github.aeckar.parsing/-inversion/index.html","searchKeys":["Inversion","class Inversion(exclusion: NamedSymbol<*>) : SimpleSymbol<Inversion> ","io.github.aeckar.parsing.Inversion"]},{"name":"class LexerSymbol(start: SymbolFragment) : NameableSymbol<LexerSymbol> ","description":"io.github.aeckar.parsing.LexerSymbol","location":"core/io.github.aeckar.parsing/-lexer-symbol/index.html","searchKeys":["LexerSymbol","class LexerSymbol(start: SymbolFragment) : NameableSymbol<LexerSymbol> ","io.github.aeckar.parsing.LexerSymbol"]},{"name":"class MalformedParserException : Exception","description":"io.github.aeckar.parsing.MalformedParserException","location":"core/io.github.aeckar.parsing/-malformed-parser-exception/index.html","searchKeys":["MalformedParserException","class MalformedParserException : Exception","io.github.aeckar.parsing.MalformedParserException"]},{"name":"class NamedNullaryLexerParser : NamedNullaryParser, NullaryParser, Lexer","description":"io.github.aeckar.parsing.NamedNullaryLexerParser","location":"core/io.github.aeckar.parsing/-named-nullary-lexer-parser/index.html","searchKeys":["NamedNullaryLexerParser","class NamedNullaryLexerParser : NamedNullaryParser, NullaryParser, Lexer","io.github.aeckar.parsing.NamedNullaryLexerParser"]},{"name":"class NamedNullaryLexerlessParser : NamedNullaryParser, NullaryParser","description":"io.github.aeckar.parsing.NamedNullaryLexerlessParser","location":"core/io.github.aeckar.parsing/-named-nullary-lexerless-parser/index.html","searchKeys":["NamedNullaryLexerlessParser","class NamedNullaryLexerlessParser : NamedNullaryParser, NullaryParser","io.github.aeckar.parsing.NamedNullaryLexerlessParser"]},{"name":"class NamedUnaryLexerParser<ArgumentT> : NamedUnaryParser<ArgumentT> , UnaryParser<ArgumentT> , Lexer","description":"io.github.aeckar.parsing.NamedUnaryLexerParser","location":"core/io.github.aeckar.parsing/-named-unary-lexer-parser/index.html","searchKeys":["NamedUnaryLexerParser","class NamedUnaryLexerParser<ArgumentT> : NamedUnaryParser<ArgumentT> , UnaryParser<ArgumentT> , Lexer","io.github.aeckar.parsing.NamedUnaryLexerParser"]},{"name":"class NamedUnaryLexerlessParser<ArgumentT> : NamedUnaryParser<ArgumentT> , UnaryParser<ArgumentT> ","description":"io.github.aeckar.parsing.NamedUnaryLexerlessParser","location":"core/io.github.aeckar.parsing/-named-unary-lexerless-parser/index.html","searchKeys":["NamedUnaryLexerlessParser","class NamedUnaryLexerlessParser<ArgumentT> : NamedUnaryParser<ArgumentT> , UnaryParser<ArgumentT> ","io.github.aeckar.parsing.NamedUnaryLexerlessParser"]},{"name":"class NullaryForeignSymbol<UnnamedT : NameableSymbol<out UnnamedT>> : ForeignSymbol<UnnamedT> ","description":"io.github.aeckar.parsing.NullaryForeignSymbol","location":"core/io.github.aeckar.parsing/-nullary-foreign-symbol/index.html","searchKeys":["NullaryForeignSymbol","class NullaryForeignSymbol<UnnamedT : NameableSymbol<out UnnamedT>> : ForeignSymbol<UnnamedT> ","io.github.aeckar.parsing.NullaryForeignSymbol"]},{"name":"class NullaryLexerParser : NameableLexerParser, Nameable, NullaryParser, Lexer","description":"io.github.aeckar.parsing.NullaryLexerParser","location":"core/io.github.aeckar.parsing/-nullary-lexer-parser/index.html","searchKeys":["NullaryLexerParser","class NullaryLexerParser : NameableLexerParser, Nameable, NullaryParser, Lexer","io.github.aeckar.parsing.NullaryLexerParser"]},{"name":"class NullaryLexerParserDefinition : LexerParserDefinition, NullaryParserDefinition","description":"io.github.aeckar.parsing.NullaryLexerParserDefinition","location":"core/io.github.aeckar.parsing/-nullary-lexer-parser-definition/index.html","searchKeys":["NullaryLexerParserDefinition","class NullaryLexerParserDefinition : LexerParserDefinition, NullaryParserDefinition","io.github.aeckar.parsing.NullaryLexerParserDefinition"]},{"name":"class NullaryLexerlessParser : NameableLexerlessParser, Nameable, NullaryParser","description":"io.github.aeckar.parsing.NullaryLexerlessParser","location":"core/io.github.aeckar.parsing/-nullary-lexerless-parser/index.html","searchKeys":["NullaryLexerlessParser","class NullaryLexerlessParser : NameableLexerlessParser, Nameable, NullaryParser","io.github.aeckar.parsing.NullaryLexerlessParser"]},{"name":"class NullaryLexerlessParserDefinition : LexerlessParserDefinition, NullaryParserDefinition","description":"io.github.aeckar.parsing.NullaryLexerlessParserDefinition","location":"core/io.github.aeckar.parsing/-nullary-lexerless-parser-definition/index.html","searchKeys":["NullaryLexerlessParserDefinition","class NullaryLexerlessParserDefinition : LexerlessParserDefinition, NullaryParserDefinition","io.github.aeckar.parsing.NullaryLexerlessParserDefinition"]},{"name":"class OnceAssignable<FieldT : Any, ExceptionT : Throwable>(throws: (String) -> ExceptionT)","description":"io.github.aeckar.parsing.utils.OnceAssignable","location":"core/io.github.aeckar.parsing.utils/-once-assignable/index.html","searchKeys":["OnceAssignable","class OnceAssignable<FieldT : Any, ExceptionT : Throwable>(throws: (String) -> ExceptionT)","io.github.aeckar.parsing.utils.OnceAssignable"]},{"name":"class Option<SubMatchT : Symbol>(query: SubMatchT) : SimpleSymbol<Option<SubMatchT>> ","description":"io.github.aeckar.parsing.Option","location":"core/io.github.aeckar.parsing/-option/index.html","searchKeys":["Option","class Option<SubMatchT : Symbol>(query: SubMatchT) : SimpleSymbol<Option<SubMatchT>> ","io.github.aeckar.parsing.Option"]},{"name":"class Repetition<SubMatchT : Symbol>(query: SubMatchT) : SimpleSymbol<Repetition<SubMatchT>> ","description":"io.github.aeckar.parsing.Repetition","location":"core/io.github.aeckar.parsing/-repetition/index.html","searchKeys":["Repetition","class Repetition<SubMatchT : Symbol>(query: SubMatchT) : SimpleSymbol<Repetition<SubMatchT>> ","io.github.aeckar.parsing.Repetition"]},{"name":"class Switch : SimpleSymbol<Switch> ","description":"io.github.aeckar.parsing.Switch","location":"core/io.github.aeckar.parsing/-switch/index.html","searchKeys":["Switch","class Switch : SimpleSymbol<Switch> ","io.github.aeckar.parsing.Switch"]},{"name":"class SymbolFragment : ParserComponent","description":"io.github.aeckar.parsing.SymbolFragment","location":"core/io.github.aeckar.parsing/-symbol-fragment/index.html","searchKeys":["SymbolFragment","class SymbolFragment : ParserComponent","io.github.aeckar.parsing.SymbolFragment"]},{"name":"class Text : SimpleSymbol<Text> ","description":"io.github.aeckar.parsing.Text","location":"core/io.github.aeckar.parsing/-text/index.html","searchKeys":["Text","class Text : SimpleSymbol<Text> ","io.github.aeckar.parsing.Text"]},{"name":"class UnaryForeignSymbol<UnnamedT : NameableSymbol<out UnnamedT>, ArgumentT> : ForeignSymbol<UnnamedT> ","description":"io.github.aeckar.parsing.UnaryForeignSymbol","location":"core/io.github.aeckar.parsing/-unary-foreign-symbol/index.html","searchKeys":["UnaryForeignSymbol","class UnaryForeignSymbol<UnnamedT : NameableSymbol<out UnnamedT>, ArgumentT> : ForeignSymbol<UnnamedT> ","io.github.aeckar.parsing.UnaryForeignSymbol"]},{"name":"class UnaryLexerParser<ArgumentT> : NameableLexerParser, Nameable, UnaryParser<ArgumentT> , Lexer","description":"io.github.aeckar.parsing.UnaryLexerParser","location":"core/io.github.aeckar.parsing/-unary-lexer-parser/index.html","searchKeys":["UnaryLexerParser","class UnaryLexerParser<ArgumentT> : NameableLexerParser, Nameable, UnaryParser<ArgumentT> , Lexer","io.github.aeckar.parsing.UnaryLexerParser"]},{"name":"class UnaryLexerParserDefinition<ArgumentT> : LexerParserDefinition, UnaryParserDefinition<ArgumentT> ","description":"io.github.aeckar.parsing.UnaryLexerParserDefinition","location":"core/io.github.aeckar.parsing/-unary-lexer-parser-definition/index.html","searchKeys":["UnaryLexerParserDefinition","class UnaryLexerParserDefinition<ArgumentT> : LexerParserDefinition, UnaryParserDefinition<ArgumentT> ","io.github.aeckar.parsing.UnaryLexerParserDefinition"]},{"name":"class UnaryLexerlessParser<ArgumentT> : NameableLexerlessParser, Nameable, UnaryParser<ArgumentT> ","description":"io.github.aeckar.parsing.UnaryLexerlessParser","location":"core/io.github.aeckar.parsing/-unary-lexerless-parser/index.html","searchKeys":["UnaryLexerlessParser","class UnaryLexerlessParser<ArgumentT> : NameableLexerlessParser, Nameable, UnaryParser<ArgumentT> ","io.github.aeckar.parsing.UnaryLexerlessParser"]},{"name":"class UnaryLexerlessParserDefinition<ArgumentT> : LexerlessParserDefinition, UnaryParserDefinition<ArgumentT> ","description":"io.github.aeckar.parsing.UnaryLexerlessParserDefinition","location":"core/io.github.aeckar.parsing/-unary-lexerless-parser-definition/index.html","searchKeys":["UnaryLexerlessParserDefinition","class UnaryLexerlessParserDefinition<ArgumentT> : LexerlessParserDefinition, UnaryParserDefinition<ArgumentT> ","io.github.aeckar.parsing.UnaryLexerlessParserDefinition"]},{"name":"constructor()","description":"io.github.aeckar.parsing.ParserDefinition.SymbolImport.SymbolImport","location":"core/io.github.aeckar.parsing/-parser-definition/-symbol-import/-symbol-import.html","searchKeys":["SymbolImport","constructor()","io.github.aeckar.parsing.ParserDefinition.SymbolImport.SymbolImport"]},{"name":"constructor()","description":"io.github.aeckar.parsing.utils.SimplePivotIterator.SimplePivotIterator","location":"core/io.github.aeckar.parsing.utils/-simple-pivot-iterator/-simple-pivot-iterator.html","searchKeys":["SimplePivotIterator","constructor()","io.github.aeckar.parsing.utils.SimplePivotIterator.SimplePivotIterator"]},{"name":"constructor(exclusion: NamedSymbol<*>)","description":"io.github.aeckar.parsing.Inversion.Inversion","location":"core/io.github.aeckar.parsing/-inversion/-inversion.html","searchKeys":["Inversion","constructor(exclusion: NamedSymbol<*>)","io.github.aeckar.parsing.Inversion.Inversion"]},{"name":"constructor(name: String, substring: String)","description":"io.github.aeckar.parsing.Token.Token","location":"core/io.github.aeckar.parsing/-token/-token.html","searchKeys":["Token","constructor(name: String, substring: String)","io.github.aeckar.parsing.Token.Token"]},{"name":"constructor(query: SubMatchT)","description":"io.github.aeckar.parsing.Option.Option","location":"core/io.github.aeckar.parsing/-option/-option.html","searchKeys":["Option","constructor(query: SubMatchT)","io.github.aeckar.parsing.Option.Option"]},{"name":"constructor(query: SubMatchT)","description":"io.github.aeckar.parsing.Repetition.Repetition","location":"core/io.github.aeckar.parsing/-repetition/-repetition.html","searchKeys":["Repetition","constructor(query: SubMatchT)","io.github.aeckar.parsing.Repetition.Repetition"]},{"name":"constructor(start: SymbolFragment)","description":"io.github.aeckar.parsing.LexerSymbol.LexerSymbol","location":"core/io.github.aeckar.parsing/-lexer-symbol/-lexer-symbol.html","searchKeys":["LexerSymbol","constructor(start: SymbolFragment)","io.github.aeckar.parsing.LexerSymbol.LexerSymbol"]},{"name":"constructor(throws: (String) -> ExceptionT)","description":"io.github.aeckar.parsing.utils.OnceAssignable.OnceAssignable","location":"core/io.github.aeckar.parsing.utils/-once-assignable/-once-assignable.html","searchKeys":["OnceAssignable","constructor(throws: (String) -> ExceptionT)","io.github.aeckar.parsing.utils.OnceAssignable.OnceAssignable"]},{"name":"data class Token(val name: String, val substring: String)","description":"io.github.aeckar.parsing.Token","location":"core/io.github.aeckar.parsing/-token/index.html","searchKeys":["Token","data class Token(val name: String, val substring: String)","io.github.aeckar.parsing.Token"]},{"name":"fun <ArgumentT> lexerParser(definition: UnaryLexerParserDefinition<ArgumentT>.() -> Unit): UnaryLexerParser<ArgumentT>","description":"io.github.aeckar.parsing.lexerParser","location":"core/io.github.aeckar.parsing/lexer-parser.html","searchKeys":["lexerParser","fun <ArgumentT> lexerParser(definition: UnaryLexerParserDefinition<ArgumentT>.() -> Unit): UnaryLexerParser<ArgumentT>","io.github.aeckar.parsing.lexerParser"]},{"name":"fun <ArgumentT> parser(definition: UnaryLexerlessParserDefinition<ArgumentT>.() -> Unit): UnaryLexerlessParser<ArgumentT>","description":"io.github.aeckar.parsing.parser","location":"core/io.github.aeckar.parsing/parser.html","searchKeys":["parser","fun <ArgumentT> parser(definition: UnaryLexerlessParserDefinition<ArgumentT>.() -> Unit): UnaryLexerlessParser<ArgumentT>","io.github.aeckar.parsing.parser"]},{"name":"fun <QueryT : Symbol> any(query: QueryT): Option<Repetition<QueryT>>","description":"io.github.aeckar.parsing.ParserDefinition.any","location":"core/io.github.aeckar.parsing/-parser-definition/any.html","searchKeys":["any","fun <QueryT : Symbol> any(query: QueryT): Option<Repetition<QueryT>>","io.github.aeckar.parsing.ParserDefinition.any"]},{"name":"fun <QueryT : Symbol> maybe(query: QueryT): Option<QueryT>","description":"io.github.aeckar.parsing.ParserDefinition.maybe","location":"core/io.github.aeckar.parsing/-parser-definition/maybe.html","searchKeys":["maybe","fun <QueryT : Symbol> maybe(query: QueryT): Option<QueryT>","io.github.aeckar.parsing.ParserDefinition.maybe"]},{"name":"fun <QueryT : Symbol> multiple(query: QueryT): Repetition<QueryT>","description":"io.github.aeckar.parsing.ParserDefinition.multiple","location":"core/io.github.aeckar.parsing/-parser-definition/multiple.html","searchKeys":["multiple","fun <QueryT : Symbol> multiple(query: QueryT): Repetition<QueryT>","io.github.aeckar.parsing.ParserDefinition.multiple"]},{"name":"fun <T> List<T>.pivotIterator(): PivotIterator<T>","description":"io.github.aeckar.parsing.utils.pivotIterator","location":"core/io.github.aeckar.parsing.utils/pivot-iterator.html","searchKeys":["pivotIterator","fun <T> List<T>.pivotIterator(): PivotIterator<T>","io.github.aeckar.parsing.utils.pivotIterator"]},{"name":"fun <UnnamedT : NameableSymbol<out UnnamedT>, ArgumentT> NamedUnaryParser<ArgumentT>.import(): ParserDefinition.UnarySymbolImport<UnnamedT, ArgumentT>","description":"io.github.aeckar.parsing.ParserDefinition.import","location":"core/io.github.aeckar.parsing/-parser-definition/import.html","searchKeys":["import","fun <UnnamedT : NameableSymbol<out UnnamedT>, ArgumentT> NamedUnaryParser<ArgumentT>.import(): ParserDefinition.UnarySymbolImport<UnnamedT, ArgumentT>","io.github.aeckar.parsing.ParserDefinition.import"]},{"name":"fun <UnnamedT : NameableSymbol<out UnnamedT>> NamedNullaryParser.import(): ParserDefinition.NullarySymbolImport<UnnamedT>","description":"io.github.aeckar.parsing.ParserDefinition.import","location":"core/io.github.aeckar.parsing/-parser-definition/import.html","searchKeys":["import","fun <UnnamedT : NameableSymbol<out UnnamedT>> NamedNullaryParser.import(): ParserDefinition.NullarySymbolImport<UnnamedT>","io.github.aeckar.parsing.ParserDefinition.import"]},{"name":"fun Node<Option<*>>.matchFailed(): Boolean","description":"io.github.aeckar.parsing.matchFailed","location":"core/io.github.aeckar.parsing/match-failed.html","searchKeys":["matchFailed","fun Node<Option<*>>.matchFailed(): Boolean","io.github.aeckar.parsing.matchFailed"]},{"name":"fun Node<Option<*>>.matchSucceeded(): Boolean","description":"io.github.aeckar.parsing.matchSucceeded","location":"core/io.github.aeckar.parsing/match-succeeded.html","searchKeys":["matchSucceeded","fun Node<Option<*>>.matchSucceeded(): Boolean","io.github.aeckar.parsing.matchSucceeded"]},{"name":"fun RawSource.pivotIterator(): CharPivotIterator","description":"io.github.aeckar.parsing.utils.pivotIterator","location":"core/io.github.aeckar.parsing.utils/pivot-iterator.html","searchKeys":["pivotIterator","fun RawSource.pivotIterator(): CharPivotIterator","io.github.aeckar.parsing.utils.pivotIterator"]},{"name":"fun String.pivotIterator(): CharPivotIterator","description":"io.github.aeckar.parsing.utils.pivotIterator","location":"core/io.github.aeckar.parsing.utils/pivot-iterator.html","searchKeys":["pivotIterator","fun String.pivotIterator(): CharPivotIterator","io.github.aeckar.parsing.utils.pivotIterator"]},{"name":"fun any(query: Char): Option<Repetition<Text>>","description":"io.github.aeckar.parsing.LexerlessParserDefinition.any","location":"core/io.github.aeckar.parsing/-lexerless-parser-definition/any.html","searchKeys":["any","fun any(query: Char): Option<Repetition<Text>>","io.github.aeckar.parsing.LexerlessParserDefinition.any"]},{"name":"fun any(query: Char): SymbolFragment","description":"io.github.aeckar.parsing.LexerParserDefinition.any","location":"core/io.github.aeckar.parsing/-lexer-parser-definition/any.html","searchKeys":["any","fun any(query: Char): SymbolFragment","io.github.aeckar.parsing.LexerParserDefinition.any"]},{"name":"fun any(query: String): Option<Repetition<Text>>","description":"io.github.aeckar.parsing.LexerlessParserDefinition.any","location":"core/io.github.aeckar.parsing/-lexerless-parser-definition/any.html","searchKeys":["any","fun any(query: String): Option<Repetition<Text>>","io.github.aeckar.parsing.LexerlessParserDefinition.any"]},{"name":"fun any(query: String): SymbolFragment","description":"io.github.aeckar.parsing.LexerParserDefinition.any","location":"core/io.github.aeckar.parsing/-lexer-parser-definition/any.html","searchKeys":["any","fun any(query: String): SymbolFragment","io.github.aeckar.parsing.LexerParserDefinition.any"]},{"name":"fun any(query: SymbolFragment): SymbolFragment","description":"io.github.aeckar.parsing.LexerParserDefinition.any","location":"core/io.github.aeckar.parsing/-lexer-parser-definition/any.html","searchKeys":["any","fun any(query: SymbolFragment): SymbolFragment","io.github.aeckar.parsing.LexerParserDefinition.any"]},{"name":"fun anyOf(switch: String): Option<Repetition<Switch>>","description":"io.github.aeckar.parsing.LexerlessParserDefinition.anyOf","location":"core/io.github.aeckar.parsing/-lexerless-parser-definition/any-of.html","searchKeys":["anyOf","fun anyOf(switch: String): Option<Repetition<Switch>>","io.github.aeckar.parsing.LexerlessParserDefinition.anyOf"]},{"name":"fun anyOf(switch: String): SymbolFragment","description":"io.github.aeckar.parsing.LexerParserDefinition.anyOf","location":"core/io.github.aeckar.parsing/-lexer-parser-definition/any-of.html","searchKeys":["anyOf","fun anyOf(switch: String): SymbolFragment","io.github.aeckar.parsing.LexerParserDefinition.anyOf"]},{"name":"fun interface NullarySymbolListener<MatchT : Symbol> : SymbolListener","description":"io.github.aeckar.parsing.NullarySymbolListener","location":"core/io.github.aeckar.parsing/-nullary-symbol-listener/index.html","searchKeys":["NullarySymbolListener","fun interface NullarySymbolListener<MatchT : Symbol> : SymbolListener","io.github.aeckar.parsing.NullarySymbolListener"]},{"name":"fun interface UnarySymbolListener<MatchT : Symbol, ArgumentT> : SymbolListener","description":"io.github.aeckar.parsing.UnarySymbolListener","location":"core/io.github.aeckar.parsing/-unary-symbol-listener/index.html","searchKeys":["UnarySymbolListener","fun interface UnarySymbolListener<MatchT : Symbol, ArgumentT> : SymbolListener","io.github.aeckar.parsing.UnarySymbolListener"]},{"name":"fun isNamed(): Boolean","description":"io.github.aeckar.parsing.Node.isNamed","location":"core/io.github.aeckar.parsing/-node/is-named.html","searchKeys":["isNamed","fun isNamed(): Boolean","io.github.aeckar.parsing.Node.isNamed"]},{"name":"fun junction(): ImplicitJunction<*>","description":"io.github.aeckar.parsing.ParserDefinition.junction","location":"core/io.github.aeckar.parsing/-parser-definition/junction.html","searchKeys":["junction","fun junction(): ImplicitJunction<*>","io.github.aeckar.parsing.ParserDefinition.junction"]},{"name":"fun lexerParser(definition: NullaryLexerParserDefinition.() -> Unit): NullaryLexerParser","description":"io.github.aeckar.parsing.lexerParser","location":"core/io.github.aeckar.parsing/lexer-parser.html","searchKeys":["lexerParser","fun lexerParser(definition: NullaryLexerParserDefinition.() -> Unit): NullaryLexerParser","io.github.aeckar.parsing.lexerParser"]},{"name":"fun maybe(query: Char): Option<Text>","description":"io.github.aeckar.parsing.LexerlessParserDefinition.maybe","location":"core/io.github.aeckar.parsing/-lexerless-parser-definition/maybe.html","searchKeys":["maybe","fun maybe(query: Char): Option<Text>","io.github.aeckar.parsing.LexerlessParserDefinition.maybe"]},{"name":"fun maybe(query: Char): SymbolFragment","description":"io.github.aeckar.parsing.LexerParserDefinition.maybe","location":"core/io.github.aeckar.parsing/-lexer-parser-definition/maybe.html","searchKeys":["maybe","fun maybe(query: Char): SymbolFragment","io.github.aeckar.parsing.LexerParserDefinition.maybe"]},{"name":"fun maybe(query: String): Option<Text>","description":"io.github.aeckar.parsing.LexerlessParserDefinition.maybe","location":"core/io.github.aeckar.parsing/-lexerless-parser-definition/maybe.html","searchKeys":["maybe","fun maybe(query: String): Option<Text>","io.github.aeckar.parsing.LexerlessParserDefinition.maybe"]},{"name":"fun maybe(query: String): SymbolFragment","description":"io.github.aeckar.parsing.LexerParserDefinition.maybe","location":"core/io.github.aeckar.parsing/-lexer-parser-definition/maybe.html","searchKeys":["maybe","fun maybe(query: String): SymbolFragment","io.github.aeckar.parsing.LexerParserDefinition.maybe"]},{"name":"fun maybe(query: SymbolFragment): SymbolFragment","description":"io.github.aeckar.parsing.LexerParserDefinition.maybe","location":"core/io.github.aeckar.parsing/-lexer-parser-definition/maybe.html","searchKeys":["maybe","fun maybe(query: SymbolFragment): SymbolFragment","io.github.aeckar.parsing.LexerParserDefinition.maybe"]},{"name":"fun maybeOf(switch: String): Option<Switch>","description":"io.github.aeckar.parsing.LexerlessParserDefinition.maybeOf","location":"core/io.github.aeckar.parsing/-lexerless-parser-definition/maybe-of.html","searchKeys":["maybeOf","fun maybeOf(switch: String): Option<Switch>","io.github.aeckar.parsing.LexerlessParserDefinition.maybeOf"]},{"name":"fun maybeOf(switch: String): SymbolFragment","description":"io.github.aeckar.parsing.LexerParserDefinition.maybeOf","location":"core/io.github.aeckar.parsing/-lexer-parser-definition/maybe-of.html","searchKeys":["maybeOf","fun maybeOf(switch: String): SymbolFragment","io.github.aeckar.parsing.LexerParserDefinition.maybeOf"]},{"name":"fun multiple(query: Char): Option<Text>","description":"io.github.aeckar.parsing.LexerlessParserDefinition.multiple","location":"core/io.github.aeckar.parsing/-lexerless-parser-definition/multiple.html","searchKeys":["multiple","fun multiple(query: Char): Option<Text>","io.github.aeckar.parsing.LexerlessParserDefinition.multiple"]},{"name":"fun multiple(query: Char): SymbolFragment","description":"io.github.aeckar.parsing.LexerParserDefinition.multiple","location":"core/io.github.aeckar.parsing/-lexer-parser-definition/multiple.html","searchKeys":["multiple","fun multiple(query: Char): SymbolFragment","io.github.aeckar.parsing.LexerParserDefinition.multiple"]},{"name":"fun multiple(query: String): Repetition<Text>","description":"io.github.aeckar.parsing.LexerlessParserDefinition.multiple","location":"core/io.github.aeckar.parsing/-lexerless-parser-definition/multiple.html","searchKeys":["multiple","fun multiple(query: String): Repetition<Text>","io.github.aeckar.parsing.LexerlessParserDefinition.multiple"]},{"name":"fun multiple(query: String): SymbolFragment","description":"io.github.aeckar.parsing.LexerParserDefinition.multiple","location":"core/io.github.aeckar.parsing/-lexer-parser-definition/multiple.html","searchKeys":["multiple","fun multiple(query: String): SymbolFragment","io.github.aeckar.parsing.LexerParserDefinition.multiple"]},{"name":"fun multiple(query: SymbolFragment): SymbolFragment","description":"io.github.aeckar.parsing.LexerParserDefinition.multiple","location":"core/io.github.aeckar.parsing/-lexer-parser-definition/multiple.html","searchKeys":["multiple","fun multiple(query: SymbolFragment): SymbolFragment","io.github.aeckar.parsing.LexerParserDefinition.multiple"]},{"name":"fun multipleOf(switch: String): Repetition<Switch>","description":"io.github.aeckar.parsing.LexerlessParserDefinition.multipleOf","location":"core/io.github.aeckar.parsing/-lexerless-parser-definition/multiple-of.html","searchKeys":["multipleOf","fun multipleOf(switch: String): Repetition<Switch>","io.github.aeckar.parsing.LexerlessParserDefinition.multipleOf"]},{"name":"fun multipleOf(switch: String): SymbolFragment","description":"io.github.aeckar.parsing.LexerParserDefinition.multipleOf","location":"core/io.github.aeckar.parsing/-lexer-parser-definition/multiple-of.html","searchKeys":["multipleOf","fun multipleOf(switch: String): SymbolFragment","io.github.aeckar.parsing.LexerParserDefinition.multipleOf"]},{"name":"fun parser(definition: NullaryLexerlessParserDefinition.() -> Unit): NullaryLexerlessParser","description":"io.github.aeckar.parsing.parser","location":"core/io.github.aeckar.parsing/parser.html","searchKeys":["parser","fun parser(definition: NullaryLexerlessParserDefinition.() -> Unit): NullaryLexerlessParser","io.github.aeckar.parsing.parser"]},{"name":"fun sequence(): ImplicitSequence<*>","description":"io.github.aeckar.parsing.ParserDefinition.sequence","location":"core/io.github.aeckar.parsing/-parser-definition/sequence.html","searchKeys":["sequence","fun sequence(): ImplicitSequence<*>","io.github.aeckar.parsing.ParserDefinition.sequence"]},{"name":"infix fun <S1 : Symbol, S2 : Symbol> S1.or(option2: S2): Junction2<S1, S2>","description":"io.github.aeckar.parsing.ParserDefinition.or","location":"core/io.github.aeckar.parsing/-parser-definition/or.html","searchKeys":["or","infix fun <S1 : Symbol, S2 : Symbol> S1.or(option2: S2): Junction2<S1, S2>","io.github.aeckar.parsing.ParserDefinition.or"]},{"name":"infix fun <S1 : Symbol> S1.or(option2: Char): Junction2<S1, Text>","description":"io.github.aeckar.parsing.LexerlessParserDefinition.or","location":"core/io.github.aeckar.parsing/-lexerless-parser-definition/or.html","searchKeys":["or","infix fun <S1 : Symbol> S1.or(option2: Char): Junction2<S1, Text>","io.github.aeckar.parsing.LexerlessParserDefinition.or"]},{"name":"infix fun <S2 : Symbol> Char.or(option2: S2): Junction2<Text, S2>","description":"io.github.aeckar.parsing.LexerlessParserDefinition.or","location":"core/io.github.aeckar.parsing/-lexerless-parser-definition/or.html","searchKeys":["or","infix fun <S2 : Symbol> Char.or(option2: S2): Junction2<Text, S2>","io.github.aeckar.parsing.LexerlessParserDefinition.or"]},{"name":"infix fun Char.or(option2: SymbolFragment): SymbolFragment","description":"io.github.aeckar.parsing.LexerParserDefinition.or","location":"core/io.github.aeckar.parsing/-lexer-parser-definition/or.html","searchKeys":["or","infix fun Char.or(option2: SymbolFragment): SymbolFragment","io.github.aeckar.parsing.LexerParserDefinition.or"]},{"name":"infix fun SymbolFragment.or(option2: Char): SymbolFragment","description":"io.github.aeckar.parsing.LexerParserDefinition.or","location":"core/io.github.aeckar.parsing/-lexer-parser-definition/or.html","searchKeys":["or","infix fun SymbolFragment.or(option2: Char): SymbolFragment","io.github.aeckar.parsing.LexerParserDefinition.or"]},{"name":"infix fun SymbolFragment.or(option2: SymbolFragment): SymbolFragment","description":"io.github.aeckar.parsing.LexerParserDefinition.or","location":"core/io.github.aeckar.parsing/-lexer-parser-definition/or.html","searchKeys":["or","infix fun SymbolFragment.or(option2: SymbolFragment): SymbolFragment","io.github.aeckar.parsing.LexerParserDefinition.or"]},{"name":"inline fun <SubMatchT : Symbol> Node<Option<SubMatchT>>.onSuccess(action: Node<SubMatchT>.() -> Unit)","description":"io.github.aeckar.parsing.onSuccess","location":"core/io.github.aeckar.parsing/on-success.html","searchKeys":["onSuccess","inline fun <SubMatchT : Symbol> Node<Option<SubMatchT>>.onSuccess(action: Node<SubMatchT>.() -> Unit)","io.github.aeckar.parsing.onSuccess"]},{"name":"inner class NullarySymbolImport<UnnamedT : NameableSymbol<out UnnamedT>> : ParserDefinition.SymbolImport<NullaryForeignSymbol<UnnamedT>> ","description":"io.github.aeckar.parsing.ParserDefinition.NullarySymbolImport","location":"core/io.github.aeckar.parsing/-parser-definition/-nullary-symbol-import/index.html","searchKeys":["NullarySymbolImport","inner class NullarySymbolImport<UnnamedT : NameableSymbol<out UnnamedT>> : ParserDefinition.SymbolImport<NullaryForeignSymbol<UnnamedT>> ","io.github.aeckar.parsing.ParserDefinition.NullarySymbolImport"]},{"name":"inner class UnarySymbolImport<UnnamedT : NameableSymbol<out UnnamedT>, ArgumentT> : ParserDefinition.SymbolImport<UnaryForeignSymbol<UnnamedT, ArgumentT>> ","description":"io.github.aeckar.parsing.ParserDefinition.UnarySymbolImport","location":"core/io.github.aeckar.parsing/-parser-definition/-unary-symbol-import/index.html","searchKeys":["UnarySymbolImport","inner class UnarySymbolImport<UnnamedT : NameableSymbol<out UnnamedT>, ArgumentT> : ParserDefinition.SymbolImport<UnaryForeignSymbol<UnnamedT, ArgumentT>> ","io.github.aeckar.parsing.ParserDefinition.UnarySymbolImport"]},{"name":"interface CharPivotIterator : PivotIterator<Char> ","description":"io.github.aeckar.parsing.utils.CharPivotIterator","location":"core/io.github.aeckar.parsing.utils/-char-pivot-iterator/index.html","searchKeys":["CharPivotIterator","interface CharPivotIterator : PivotIterator<Char> ","io.github.aeckar.parsing.utils.CharPivotIterator"]},{"name":"interface Nameable","description":"io.github.aeckar.parsing.utils.Nameable","location":"core/io.github.aeckar.parsing.utils/-nameable/index.html","searchKeys":["Nameable","interface Nameable","io.github.aeckar.parsing.utils.Nameable"]},{"name":"interface Named","description":"io.github.aeckar.parsing.utils.Named","location":"core/io.github.aeckar.parsing.utils/-named/index.html","searchKeys":["Named","interface Named","io.github.aeckar.parsing.utils.Named"]},{"name":"interface PivotIterator<ElementT> : Iterator<ElementT> ","description":"io.github.aeckar.parsing.utils.PivotIterator","location":"core/io.github.aeckar.parsing.utils/-pivot-iterator/index.html","searchKeys":["PivotIterator","interface PivotIterator<ElementT> : Iterator<ElementT> ","io.github.aeckar.parsing.utils.PivotIterator"]},{"name":"object Companion","description":"io.github.aeckar.parsing.ImplicitSequence.Companion","location":"core/io.github.aeckar.parsing/-implicit-sequence/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aeckar.parsing.ImplicitSequence.Companion"]},{"name":"object Companion","description":"io.github.aeckar.parsing.Switch.Companion","location":"core/io.github.aeckar.parsing/-switch/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aeckar.parsing.Switch.Companion"]},{"name":"open class NamedSymbol<UnnamedT : NameableSymbol<out UnnamedT>> : Symbol, Named","description":"io.github.aeckar.parsing.NamedSymbol","location":"core/io.github.aeckar.parsing/-named-symbol/index.html","searchKeys":["NamedSymbol","open class NamedSymbol<UnnamedT : NameableSymbol<out UnnamedT>> : Symbol, Named","io.github.aeckar.parsing.NamedSymbol"]},{"name":"open class Node<MatchT : Symbol>","description":"io.github.aeckar.parsing.Node","location":"core/io.github.aeckar.parsing/-node/index.html","searchKeys":["Node","open class Node<MatchT : Symbol>","io.github.aeckar.parsing.Node"]},{"name":"open fun isExhausted(): Boolean","description":"io.github.aeckar.parsing.utils.PivotIterator.isExhausted","location":"core/io.github.aeckar.parsing.utils/-pivot-iterator/is-exhausted.html","searchKeys":["isExhausted","open fun isExhausted(): Boolean","io.github.aeckar.parsing.utils.PivotIterator.isExhausted"]},{"name":"open infix override fun <MatchT : NameableSymbol<MatchT>> UnaryForeignSymbol<MatchT, in ArgumentT>.extendsListener(action: UnarySymbolListener<MatchT, ArgumentT>)","description":"io.github.aeckar.parsing.UnaryLexerlessParserDefinition.extendsListener","location":"core/io.github.aeckar.parsing/-unary-lexerless-parser-definition/extends-listener.html","searchKeys":["extendsListener","open infix override fun <MatchT : NameableSymbol<MatchT>> UnaryForeignSymbol<MatchT, in ArgumentT>.extendsListener(action: UnarySymbolListener<MatchT, ArgumentT>)","io.github.aeckar.parsing.UnaryLexerlessParserDefinition.extendsListener"]},{"name":"open infix override fun <MatchT : NameableSymbol<out MatchT>> NamedSymbol<out MatchT>.listener(action: NullarySymbolListener<MatchT>)","description":"io.github.aeckar.parsing.NullaryLexerlessParserDefinition.listener","location":"core/io.github.aeckar.parsing/-nullary-lexerless-parser-definition/listener.html","searchKeys":["listener","open infix override fun <MatchT : NameableSymbol<out MatchT>> NamedSymbol<out MatchT>.listener(action: NullarySymbolListener<MatchT>)","io.github.aeckar.parsing.NullaryLexerlessParserDefinition.listener"]},{"name":"open infix override fun <MatchT : NameableSymbol<out MatchT>> NamedSymbol<out MatchT>.listener(action: UnarySymbolListener<MatchT, ArgumentT>)","description":"io.github.aeckar.parsing.UnaryLexerlessParserDefinition.listener","location":"core/io.github.aeckar.parsing/-unary-lexerless-parser-definition/listener.html","searchKeys":["listener","open infix override fun <MatchT : NameableSymbol<out MatchT>> NamedSymbol<out MatchT>.listener(action: UnarySymbolListener<MatchT, ArgumentT>)","io.github.aeckar.parsing.UnaryLexerlessParserDefinition.listener"]},{"name":"open infix override fun <MatchT : NameableSymbol<out MatchT>> NullaryForeignSymbol<out MatchT>.extendsListener(action: NullarySymbolListener<MatchT>)","description":"io.github.aeckar.parsing.NullaryLexerlessParserDefinition.extendsListener","location":"core/io.github.aeckar.parsing/-nullary-lexerless-parser-definition/extends-listener.html","searchKeys":["extendsListener","open infix override fun <MatchT : NameableSymbol<out MatchT>> NullaryForeignSymbol<out MatchT>.extendsListener(action: NullarySymbolListener<MatchT>)","io.github.aeckar.parsing.NullaryLexerlessParserDefinition.extendsListener"]},{"name":"open infix override fun <MatchT : NameableSymbol<out MatchT>> NullaryForeignSymbol<out MatchT>.extendsListener(action: UnarySymbolListener<MatchT, ArgumentT>)","description":"io.github.aeckar.parsing.UnaryLexerlessParserDefinition.extendsListener","location":"core/io.github.aeckar.parsing/-unary-lexerless-parser-definition/extends-listener.html","searchKeys":["extendsListener","open infix override fun <MatchT : NameableSymbol<out MatchT>> NullaryForeignSymbol<out MatchT>.extendsListener(action: UnarySymbolListener<MatchT, ArgumentT>)","io.github.aeckar.parsing.UnaryLexerlessParserDefinition.extendsListener"]},{"name":"open operator override fun getValue(thisRef: Any?, property: KProperty<*>): NamedNullaryLexerParser","description":"io.github.aeckar.parsing.NullaryLexerParser.getValue","location":"core/io.github.aeckar.parsing/-nullary-lexer-parser/get-value.html","searchKeys":["getValue","open operator override fun getValue(thisRef: Any?, property: KProperty<*>): NamedNullaryLexerParser","io.github.aeckar.parsing.NullaryLexerParser.getValue"]},{"name":"open operator override fun getValue(thisRef: Any?, property: KProperty<*>): NamedNullaryLexerlessParser","description":"io.github.aeckar.parsing.NullaryLexerlessParser.getValue","location":"core/io.github.aeckar.parsing/-nullary-lexerless-parser/get-value.html","searchKeys":["getValue","open operator override fun getValue(thisRef: Any?, property: KProperty<*>): NamedNullaryLexerlessParser","io.github.aeckar.parsing.NullaryLexerlessParser.getValue"]},{"name":"open operator override fun getValue(thisRef: Any?, property: KProperty<*>): NamedUnaryLexerParser<ArgumentT>","description":"io.github.aeckar.parsing.UnaryLexerParser.getValue","location":"core/io.github.aeckar.parsing/-unary-lexer-parser/get-value.html","searchKeys":["getValue","open operator override fun getValue(thisRef: Any?, property: KProperty<*>): NamedUnaryLexerParser<ArgumentT>","io.github.aeckar.parsing.UnaryLexerParser.getValue"]},{"name":"open operator override fun getValue(thisRef: Any?, property: KProperty<*>): NamedUnaryLexerlessParser<ArgumentT>","description":"io.github.aeckar.parsing.UnaryLexerlessParser.getValue","location":"core/io.github.aeckar.parsing/-unary-lexerless-parser/get-value.html","searchKeys":["getValue","open operator override fun getValue(thisRef: Any?, property: KProperty<*>): NamedUnaryLexerlessParser<ArgumentT>","io.github.aeckar.parsing.UnaryLexerlessParser.getValue"]},{"name":"open operator override fun getValue(thisRef: Any?, property: KProperty<*>): NullaryForeignSymbol<UnnamedT>","description":"io.github.aeckar.parsing.ParserDefinition.NullarySymbolImport.getValue","location":"core/io.github.aeckar.parsing/-parser-definition/-nullary-symbol-import/get-value.html","searchKeys":["getValue","open operator override fun getValue(thisRef: Any?, property: KProperty<*>): NullaryForeignSymbol<UnnamedT>","io.github.aeckar.parsing.ParserDefinition.NullarySymbolImport.getValue"]},{"name":"open operator override fun getValue(thisRef: Any?, property: KProperty<*>): UnaryForeignSymbol<UnnamedT, ArgumentT>","description":"io.github.aeckar.parsing.ParserDefinition.UnarySymbolImport.getValue","location":"core/io.github.aeckar.parsing/-parser-definition/-unary-symbol-import/get-value.html","searchKeys":["getValue","open operator override fun getValue(thisRef: Any?, property: KProperty<*>): UnaryForeignSymbol<UnnamedT, ArgumentT>","io.github.aeckar.parsing.ParserDefinition.UnarySymbolImport.getValue"]},{"name":"open operator override fun next(): Char","description":"io.github.aeckar.parsing.utils.CharPivotIterator.next","location":"core/io.github.aeckar.parsing.utils/-char-pivot-iterator/next.html","searchKeys":["next","open operator override fun next(): Char","io.github.aeckar.parsing.utils.CharPivotIterator.next"]},{"name":"open override fun init(initializer: (ArgumentT) -> Unit)","description":"io.github.aeckar.parsing.UnaryLexerlessParserDefinition.init","location":"core/io.github.aeckar.parsing/-unary-lexerless-parser-definition/init.html","searchKeys":["init","open override fun init(initializer: (ArgumentT) -> Unit)","io.github.aeckar.parsing.UnaryLexerlessParserDefinition.init"]},{"name":"open override fun peek(): Char","description":"io.github.aeckar.parsing.utils.CharPivotIterator.peek","location":"core/io.github.aeckar.parsing.utils/-char-pivot-iterator/peek.html","searchKeys":["peek","open override fun peek(): Char","io.github.aeckar.parsing.utils.CharPivotIterator.peek"]},{"name":"open override fun toString(): String","description":"io.github.aeckar.parsing.NamedNullaryLexerParser.toString","location":"core/io.github.aeckar.parsing/-named-nullary-lexer-parser/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aeckar.parsing.NamedNullaryLexerParser.toString"]},{"name":"open override fun toString(): String","description":"io.github.aeckar.parsing.NamedNullaryLexerlessParser.toString","location":"core/io.github.aeckar.parsing/-named-nullary-lexerless-parser/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aeckar.parsing.NamedNullaryLexerlessParser.toString"]},{"name":"open override fun toString(): String","description":"io.github.aeckar.parsing.NamedUnaryLexerParser.toString","location":"core/io.github.aeckar.parsing/-named-unary-lexer-parser/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aeckar.parsing.NamedUnaryLexerParser.toString"]},{"name":"open override fun toString(): String","description":"io.github.aeckar.parsing.NamedUnaryLexerlessParser.toString","location":"core/io.github.aeckar.parsing/-named-unary-lexerless-parser/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aeckar.parsing.NamedUnaryLexerlessParser.toString"]},{"name":"open override val name: String","description":"io.github.aeckar.parsing.NamedNullaryLexerParser.name","location":"core/io.github.aeckar.parsing/-named-nullary-lexer-parser/name.html","searchKeys":["name","open override val name: String","io.github.aeckar.parsing.NamedNullaryLexerParser.name"]},{"name":"open override val name: String","description":"io.github.aeckar.parsing.NamedNullaryLexerlessParser.name","location":"core/io.github.aeckar.parsing/-named-nullary-lexerless-parser/name.html","searchKeys":["name","open override val name: String","io.github.aeckar.parsing.NamedNullaryLexerlessParser.name"]},{"name":"open override val name: String","description":"io.github.aeckar.parsing.NamedSymbol.name","location":"core/io.github.aeckar.parsing/-named-symbol/name.html","searchKeys":["name","open override val name: String","io.github.aeckar.parsing.NamedSymbol.name"]},{"name":"open override val name: String","description":"io.github.aeckar.parsing.NamedUnaryLexerParser.name","location":"core/io.github.aeckar.parsing/-named-unary-lexer-parser/name.html","searchKeys":["name","open override val name: String","io.github.aeckar.parsing.NamedUnaryLexerParser.name"]},{"name":"open override val name: String","description":"io.github.aeckar.parsing.NamedUnaryLexerlessParser.name","location":"core/io.github.aeckar.parsing/-named-unary-lexerless-parser/name.html","searchKeys":["name","open override val name: String","io.github.aeckar.parsing.NamedUnaryLexerlessParser.name"]},{"name":"open val children: List<Node<*>>","description":"io.github.aeckar.parsing.Node.children","location":"core/io.github.aeckar.parsing/-node/children.html","searchKeys":["children","open val children: List<Node<*>>","io.github.aeckar.parsing.Node.children"]},{"name":"operator fun <ArgumentT> UnaryParser<ArgumentT>.invoke(argument: ArgumentT, input: RawSource): Node<*>?","description":"io.github.aeckar.parsing.invoke","location":"core/io.github.aeckar.parsing/invoke.html","searchKeys":["invoke","operator fun <ArgumentT> UnaryParser<ArgumentT>.invoke(argument: ArgumentT, input: RawSource): Node<*>?","io.github.aeckar.parsing.invoke"]},{"name":"operator fun <ArgumentT> UnaryParser<ArgumentT>.invoke(argument: ArgumentT, input: String): Node<*>?","description":"io.github.aeckar.parsing.invoke","location":"core/io.github.aeckar.parsing/invoke.html","searchKeys":["invoke","operator fun <ArgumentT> UnaryParser<ArgumentT>.invoke(argument: ArgumentT, input: String): Node<*>?","io.github.aeckar.parsing.invoke"]},{"name":"operator fun <S : NameableSymbol<S>> NameableSymbol<S>.getValue(thisRef: Any?, property: KProperty<*>): NamedSymbol<S>","description":"io.github.aeckar.parsing.ParserDefinition.getValue","location":"core/io.github.aeckar.parsing/-parser-definition/get-value.html","searchKeys":["getValue","operator fun <S : NameableSymbol<S>> NameableSymbol<S>.getValue(thisRef: Any?, property: KProperty<*>): NamedSymbol<S>","io.github.aeckar.parsing.ParserDefinition.getValue"]},{"name":"operator fun <S1 : Symbol, S2 : Symbol> S1.plus(query2: S2): Sequence2<S1, S2>","description":"io.github.aeckar.parsing.ParserDefinition.plus","location":"core/io.github.aeckar.parsing/-parser-definition/plus.html","searchKeys":["plus","operator fun <S1 : Symbol, S2 : Symbol> S1.plus(query2: S2): Sequence2<S1, S2>","io.github.aeckar.parsing.ParserDefinition.plus"]},{"name":"operator fun <S1 : Symbol> S1.plus(query2: Char): Sequence2<S1, Text>","description":"io.github.aeckar.parsing.LexerlessParserDefinition.plus","location":"core/io.github.aeckar.parsing/-lexerless-parser-definition/plus.html","searchKeys":["plus","operator fun <S1 : Symbol> S1.plus(query2: Char): Sequence2<S1, Text>","io.github.aeckar.parsing.LexerlessParserDefinition.plus"]},{"name":"operator fun <S2 : Symbol> Char.plus(query2: S2): Sequence2<Text, S2>","description":"io.github.aeckar.parsing.LexerlessParserDefinition.plus","location":"core/io.github.aeckar.parsing/-lexerless-parser-definition/plus.html","searchKeys":["plus","operator fun <S2 : Symbol> Char.plus(query2: S2): Sequence2<Text, S2>","io.github.aeckar.parsing.LexerlessParserDefinition.plus"]},{"name":"operator fun Char.getValue(thisRef: Any?, symbol: KProperty<*>): NamedSymbol<LexerSymbol>","description":"io.github.aeckar.parsing.LexerParserDefinition.getValue","location":"core/io.github.aeckar.parsing/-lexer-parser-definition/get-value.html","searchKeys":["getValue","operator fun Char.getValue(thisRef: Any?, symbol: KProperty<*>): NamedSymbol<LexerSymbol>","io.github.aeckar.parsing.LexerParserDefinition.getValue"]},{"name":"operator fun Char.getValue(thisRef: Any?, symbol: KProperty<*>): NamedSymbol<Text>","description":"io.github.aeckar.parsing.LexerlessParserDefinition.getValue","location":"core/io.github.aeckar.parsing/-lexerless-parser-definition/get-value.html","searchKeys":["getValue","operator fun Char.getValue(thisRef: Any?, symbol: KProperty<*>): NamedSymbol<Text>","io.github.aeckar.parsing.LexerlessParserDefinition.getValue"]},{"name":"operator fun Char.plus(query2: SymbolFragment): SymbolFragment","description":"io.github.aeckar.parsing.LexerParserDefinition.plus","location":"core/io.github.aeckar.parsing/-lexer-parser-definition/plus.html","searchKeys":["plus","operator fun Char.plus(query2: SymbolFragment): SymbolFragment","io.github.aeckar.parsing.LexerParserDefinition.plus"]},{"name":"operator fun NamedParser.get(symbolName: String): Symbol","description":"io.github.aeckar.parsing.ParserDefinition.get","location":"core/io.github.aeckar.parsing/-parser-definition/get.html","searchKeys":["get","operator fun NamedParser.get(symbolName: String): Symbol","io.github.aeckar.parsing.ParserDefinition.get"]},{"name":"operator fun NamedSymbol<*>.not(): Inversion","description":"io.github.aeckar.parsing.ParserDefinition.not","location":"core/io.github.aeckar.parsing/-parser-definition/not.html","searchKeys":["not","operator fun NamedSymbol<*>.not(): Inversion","io.github.aeckar.parsing.ParserDefinition.not"]},{"name":"operator fun NullaryParser.invoke(input: RawSource): Node<*>?","description":"io.github.aeckar.parsing.invoke","location":"core/io.github.aeckar.parsing/invoke.html","searchKeys":["invoke","operator fun NullaryParser.invoke(input: RawSource): Node<*>?","io.github.aeckar.parsing.invoke"]},{"name":"operator fun NullaryParser.invoke(input: String): Node<*>?","description":"io.github.aeckar.parsing.invoke","location":"core/io.github.aeckar.parsing/invoke.html","searchKeys":["invoke","operator fun NullaryParser.invoke(input: String): Node<*>?","io.github.aeckar.parsing.invoke"]},{"name":"operator fun String.not(): String","description":"io.github.aeckar.parsing.ParserDefinition.not","location":"core/io.github.aeckar.parsing/-parser-definition/not.html","searchKeys":["not","operator fun String.not(): String","io.github.aeckar.parsing.ParserDefinition.not"]},{"name":"operator fun SymbolFragment.getValue(thisRef: Any?, symbol: KProperty<*>): NamedSymbol<LexerSymbol>","description":"io.github.aeckar.parsing.LexerParserDefinition.getValue","location":"core/io.github.aeckar.parsing/-lexer-parser-definition/get-value.html","searchKeys":["getValue","operator fun SymbolFragment.getValue(thisRef: Any?, symbol: KProperty<*>): NamedSymbol<LexerSymbol>","io.github.aeckar.parsing.LexerParserDefinition.getValue"]},{"name":"operator fun SymbolFragment.plus(query2: Char): SymbolFragment","description":"io.github.aeckar.parsing.LexerParserDefinition.plus","location":"core/io.github.aeckar.parsing/-lexer-parser-definition/plus.html","searchKeys":["plus","operator fun SymbolFragment.plus(query2: Char): SymbolFragment","io.github.aeckar.parsing.LexerParserDefinition.plus"]},{"name":"operator fun SymbolFragment.plus(query2: SymbolFragment): SymbolFragment","description":"io.github.aeckar.parsing.LexerParserDefinition.plus","location":"core/io.github.aeckar.parsing/-lexer-parser-definition/plus.html","searchKeys":["plus","operator fun SymbolFragment.plus(query2: SymbolFragment): SymbolFragment","io.github.aeckar.parsing.LexerParserDefinition.plus"]},{"name":"operator fun getValue(thisRef: Any?, property: KProperty<*>): FieldT","description":"io.github.aeckar.parsing.utils.OnceAssignable.getValue","location":"core/io.github.aeckar.parsing.utils/-once-assignable/get-value.html","searchKeys":["getValue","operator fun getValue(thisRef: Any?, property: KProperty<*>): FieldT","io.github.aeckar.parsing.utils.OnceAssignable.getValue"]},{"name":"operator fun provideDelegate(thisRef: Any?, property: KProperty<*>): OnceAssignable<FieldT, ExceptionT>","description":"io.github.aeckar.parsing.utils.OnceAssignable.provideDelegate","location":"core/io.github.aeckar.parsing.utils/-once-assignable/provide-delegate.html","searchKeys":["provideDelegate","operator fun provideDelegate(thisRef: Any?, property: KProperty<*>): OnceAssignable<FieldT, ExceptionT>","io.github.aeckar.parsing.utils.OnceAssignable.provideDelegate"]},{"name":"operator fun setValue(thisRef: Any?, property: KProperty<*>, value: FieldT)","description":"io.github.aeckar.parsing.utils.OnceAssignable.setValue","location":"core/io.github.aeckar.parsing.utils/-once-assignable/set-value.html","searchKeys":["setValue","operator fun setValue(thisRef: Any?, property: KProperty<*>, value: FieldT)","io.github.aeckar.parsing.utils.OnceAssignable.setValue"]},{"name":"override fun advance(places: Int)","description":"io.github.aeckar.parsing.utils.SimplePivotIterator.advance","location":"core/io.github.aeckar.parsing.utils/-simple-pivot-iterator/advance.html","searchKeys":["advance","override fun advance(places: Int)","io.github.aeckar.parsing.utils.SimplePivotIterator.advance"]},{"name":"override fun of(switch: String): Switch","description":"io.github.aeckar.parsing.LexerlessParserDefinition.of","location":"core/io.github.aeckar.parsing/-lexerless-parser-definition/of.html","searchKeys":["of","override fun of(switch: String): Switch","io.github.aeckar.parsing.LexerlessParserDefinition.of"]},{"name":"override fun of(switch: String): SymbolFragment","description":"io.github.aeckar.parsing.LexerParserDefinition.of","location":"core/io.github.aeckar.parsing/-lexer-parser-definition/of.html","searchKeys":["of","override fun of(switch: String): SymbolFragment","io.github.aeckar.parsing.LexerParserDefinition.of"]},{"name":"override fun parse(input: RawSource): Node<*>?","description":"io.github.aeckar.parsing.NameableLexerParser.parse","location":"core/io.github.aeckar.parsing/-nameable-lexer-parser/parse.html","searchKeys":["parse","override fun parse(input: RawSource): Node<*>?","io.github.aeckar.parsing.NameableLexerParser.parse"]},{"name":"override fun parse(input: RawSource): Node<*>?","description":"io.github.aeckar.parsing.NameableLexerlessParser.parse","location":"core/io.github.aeckar.parsing/-nameable-lexerless-parser/parse.html","searchKeys":["parse","override fun parse(input: RawSource): Node<*>?","io.github.aeckar.parsing.NameableLexerlessParser.parse"]},{"name":"override fun parse(input: String): Node<*>?","description":"io.github.aeckar.parsing.NameableLexerParser.parse","location":"core/io.github.aeckar.parsing/-nameable-lexer-parser/parse.html","searchKeys":["parse","override fun parse(input: String): Node<*>?","io.github.aeckar.parsing.NameableLexerParser.parse"]},{"name":"override fun parse(input: String): Node<*>?","description":"io.github.aeckar.parsing.NameableLexerlessParser.parse","location":"core/io.github.aeckar.parsing/-nameable-lexerless-parser/parse.html","searchKeys":["parse","override fun parse(input: String): Node<*>?","io.github.aeckar.parsing.NameableLexerlessParser.parse"]},{"name":"override fun removeSave()","description":"io.github.aeckar.parsing.utils.SimplePivotIterator.removeSave","location":"core/io.github.aeckar.parsing.utils/-simple-pivot-iterator/remove-save.html","searchKeys":["removeSave","override fun removeSave()","io.github.aeckar.parsing.utils.SimplePivotIterator.removeSave"]},{"name":"override fun revert()","description":"io.github.aeckar.parsing.utils.SimplePivotIterator.revert","location":"core/io.github.aeckar.parsing.utils/-simple-pivot-iterator/revert.html","searchKeys":["revert","override fun revert()","io.github.aeckar.parsing.utils.SimplePivotIterator.revert"]},{"name":"override fun save()","description":"io.github.aeckar.parsing.utils.SimplePivotIterator.save","location":"core/io.github.aeckar.parsing.utils/-simple-pivot-iterator/save.html","searchKeys":["save","override fun save()","io.github.aeckar.parsing.utils.SimplePivotIterator.save"]},{"name":"override fun text(query: String): SymbolFragment","description":"io.github.aeckar.parsing.LexerParserDefinition.text","location":"core/io.github.aeckar.parsing/-lexer-parser-definition/text.html","searchKeys":["text","override fun text(query: String): SymbolFragment","io.github.aeckar.parsing.LexerParserDefinition.text"]},{"name":"override fun text(query: String): Text","description":"io.github.aeckar.parsing.LexerlessParserDefinition.text","location":"core/io.github.aeckar.parsing/-lexerless-parser-definition/text.html","searchKeys":["text","override fun text(query: String): Text","io.github.aeckar.parsing.LexerlessParserDefinition.text"]},{"name":"override fun toString(): String","description":"io.github.aeckar.parsing.Node.toString","location":"core/io.github.aeckar.parsing/-node/to-string.html","searchKeys":["toString","override fun toString(): String","io.github.aeckar.parsing.Node.toString"]},{"name":"override fun toString(): String","description":"io.github.aeckar.parsing.Symbol.toString","location":"core/io.github.aeckar.parsing/-symbol/to-string.html","searchKeys":["toString","override fun toString(): String","io.github.aeckar.parsing.Symbol.toString"]},{"name":"override fun tokenize(input: RawSource): List<Token>","description":"io.github.aeckar.parsing.NameableLexerParser.tokenize","location":"core/io.github.aeckar.parsing/-nameable-lexer-parser/tokenize.html","searchKeys":["tokenize","override fun tokenize(input: RawSource): List<Token>","io.github.aeckar.parsing.NameableLexerParser.tokenize"]},{"name":"override fun tokenize(input: String): List<Token>","description":"io.github.aeckar.parsing.NameableLexerParser.tokenize","location":"core/io.github.aeckar.parsing/-nameable-lexer-parser/tokenize.html","searchKeys":["tokenize","override fun tokenize(input: String): List<Token>","io.github.aeckar.parsing.NameableLexerParser.tokenize"]},{"name":"override val symbols: Map<String, NameableSymbol<*>>","description":"io.github.aeckar.parsing.NameableLexerParser.symbols","location":"core/io.github.aeckar.parsing/-nameable-lexer-parser/symbols.html","searchKeys":["symbols","override val symbols: Map<String, NameableSymbol<*>>","io.github.aeckar.parsing.NameableLexerParser.symbols"]},{"name":"override val symbols: Map<String, NameableSymbol<*>>","description":"io.github.aeckar.parsing.NameableLexerlessParser.symbols","location":"core/io.github.aeckar.parsing/-nameable-lexerless-parser/symbols.html","searchKeys":["symbols","override val symbols: Map<String, NameableSymbol<*>>","io.github.aeckar.parsing.NameableLexerlessParser.symbols"]},{"name":"sealed class ForeignSymbol<UnnamedT : NameableSymbol<out UnnamedT>> : NamedSymbol<UnnamedT> ","description":"io.github.aeckar.parsing.ForeignSymbol","location":"core/io.github.aeckar.parsing/-foreign-symbol/index.html","searchKeys":["ForeignSymbol","sealed class ForeignSymbol<UnnamedT : NameableSymbol<out UnnamedT>> : NamedSymbol<UnnamedT> ","io.github.aeckar.parsing.ForeignSymbol"]},{"name":"sealed class LexerParserDefinition : ParserDefinition","description":"io.github.aeckar.parsing.LexerParserDefinition","location":"core/io.github.aeckar.parsing/-lexer-parser-definition/index.html","searchKeys":["LexerParserDefinition","sealed class LexerParserDefinition : ParserDefinition","io.github.aeckar.parsing.LexerParserDefinition"]},{"name":"sealed class LexerlessParserDefinition : ParserDefinition","description":"io.github.aeckar.parsing.LexerlessParserDefinition","location":"core/io.github.aeckar.parsing/-lexerless-parser-definition/index.html","searchKeys":["LexerlessParserDefinition","sealed class LexerlessParserDefinition : ParserDefinition","io.github.aeckar.parsing.LexerlessParserDefinition"]},{"name":"sealed class NameableLexerParser : Lexer, Parser","description":"io.github.aeckar.parsing.NameableLexerParser","location":"core/io.github.aeckar.parsing/-nameable-lexer-parser/index.html","searchKeys":["NameableLexerParser","sealed class NameableLexerParser : Lexer, Parser","io.github.aeckar.parsing.NameableLexerParser"]},{"name":"sealed class NameableLexerlessParser : Parser","description":"io.github.aeckar.parsing.NameableLexerlessParser","location":"core/io.github.aeckar.parsing/-nameable-lexerless-parser/index.html","searchKeys":["NameableLexerlessParser","sealed class NameableLexerlessParser : Parser","io.github.aeckar.parsing.NameableLexerlessParser"]},{"name":"sealed class ParserDefinition","description":"io.github.aeckar.parsing.ParserDefinition","location":"core/io.github.aeckar.parsing/-parser-definition/index.html","searchKeys":["ParserDefinition","sealed class ParserDefinition","io.github.aeckar.parsing.ParserDefinition"]},{"name":"sealed class SimpleSymbol<InheritorT : SimpleSymbol<InheritorT>> : NameableSymbol<InheritorT> ","description":"io.github.aeckar.parsing.SimpleSymbol","location":"core/io.github.aeckar.parsing/-simple-symbol/index.html","searchKeys":["SimpleSymbol","sealed class SimpleSymbol<InheritorT : SimpleSymbol<InheritorT>> : NameableSymbol<InheritorT> ","io.github.aeckar.parsing.SimpleSymbol"]},{"name":"sealed class TypeUnsafeSymbol<TypeSafeT : TypeSafeSymbol<*, *>, InheritorT : TypeUnsafeSymbol<TypeSafeT, InheritorT>> : NameableSymbol<InheritorT> ","description":"io.github.aeckar.parsing.TypeUnsafeSymbol","location":"core/io.github.aeckar.parsing/-type-unsafe-symbol/index.html","searchKeys":["TypeUnsafeSymbol","sealed class TypeUnsafeSymbol<TypeSafeT : TypeSafeSymbol<*, *>, InheritorT : TypeUnsafeSymbol<TypeSafeT, InheritorT>> : NameableSymbol<InheritorT> ","io.github.aeckar.parsing.TypeUnsafeSymbol"]},{"name":"sealed interface Lexer","description":"io.github.aeckar.parsing.Lexer","location":"core/io.github.aeckar.parsing/-lexer/index.html","searchKeys":["Lexer","sealed interface Lexer","io.github.aeckar.parsing.Lexer"]},{"name":"sealed interface NamedNullaryParser : NamedParser, NullaryParser","description":"io.github.aeckar.parsing.NamedNullaryParser","location":"core/io.github.aeckar.parsing/-named-nullary-parser/index.html","searchKeys":["NamedNullaryParser","sealed interface NamedNullaryParser : NamedParser, NullaryParser","io.github.aeckar.parsing.NamedNullaryParser"]},{"name":"sealed interface NamedParser : Named, Parser","description":"io.github.aeckar.parsing.NamedParser","location":"core/io.github.aeckar.parsing/-named-parser/index.html","searchKeys":["NamedParser","sealed interface NamedParser : Named, Parser","io.github.aeckar.parsing.NamedParser"]},{"name":"sealed interface NamedUnaryParser<ArgumentT> : NamedParser, UnaryParser<ArgumentT> ","description":"io.github.aeckar.parsing.NamedUnaryParser","location":"core/io.github.aeckar.parsing/-named-unary-parser/index.html","searchKeys":["NamedUnaryParser","sealed interface NamedUnaryParser<ArgumentT> : NamedParser, UnaryParser<ArgumentT> ","io.github.aeckar.parsing.NamedUnaryParser"]},{"name":"sealed interface NullaryParser : Parser","description":"io.github.aeckar.parsing.NullaryParser","location":"core/io.github.aeckar.parsing/-nullary-parser/index.html","searchKeys":["NullaryParser","sealed interface NullaryParser : Parser","io.github.aeckar.parsing.NullaryParser"]},{"name":"sealed interface NullaryParserDefinition","description":"io.github.aeckar.parsing.NullaryParserDefinition","location":"core/io.github.aeckar.parsing/-nullary-parser-definition/index.html","searchKeys":["NullaryParserDefinition","sealed interface NullaryParserDefinition","io.github.aeckar.parsing.NullaryParserDefinition"]},{"name":"sealed interface Parser","description":"io.github.aeckar.parsing.Parser","location":"core/io.github.aeckar.parsing/-parser/index.html","searchKeys":["Parser","sealed interface Parser","io.github.aeckar.parsing.Parser"]},{"name":"sealed interface ParserComponent","description":"io.github.aeckar.parsing.ParserComponent","location":"core/io.github.aeckar.parsing/-parser-component/index.html","searchKeys":["ParserComponent","sealed interface ParserComponent","io.github.aeckar.parsing.ParserComponent"]},{"name":"sealed interface SymbolListener","description":"io.github.aeckar.parsing.SymbolListener","location":"core/io.github.aeckar.parsing/-symbol-listener/index.html","searchKeys":["SymbolListener","sealed interface SymbolListener","io.github.aeckar.parsing.SymbolListener"]},{"name":"sealed interface UnaryParser<ArgumentT> : Parser","description":"io.github.aeckar.parsing.UnaryParser","location":"core/io.github.aeckar.parsing/-unary-parser/index.html","searchKeys":["UnaryParser","sealed interface UnaryParser<ArgumentT> : Parser","io.github.aeckar.parsing.UnaryParser"]},{"name":"sealed interface UnaryParserDefinition<ArgumentT>","description":"io.github.aeckar.parsing.UnaryParserDefinition","location":"core/io.github.aeckar.parsing/-unary-parser-definition/index.html","searchKeys":["UnaryParserDefinition","sealed interface UnaryParserDefinition<ArgumentT>","io.github.aeckar.parsing.UnaryParserDefinition"]},{"name":"val ANY_CHAR: Switch","description":"io.github.aeckar.parsing.Switch.Companion.ANY_CHAR","location":"core/io.github.aeckar.parsing/-switch/-companion/-a-n-y_-c-h-a-r.html","searchKeys":["ANY_CHAR","val ANY_CHAR: Switch","io.github.aeckar.parsing.Switch.Companion.ANY_CHAR"]},{"name":"val LINE: ImplicitSequence<*>","description":"io.github.aeckar.parsing.ImplicitSequence.Companion.LINE","location":"core/io.github.aeckar.parsing/-implicit-sequence/-companion/-l-i-n-e.html","searchKeys":["LINE","val LINE: ImplicitSequence<*>","io.github.aeckar.parsing.ImplicitSequence.Companion.LINE"]},{"name":"val Node<TypeSafeJunction<*>>.matchOrdinal: Int","description":"io.github.aeckar.parsing.matchOrdinal","location":"core/io.github.aeckar.parsing/match-ordinal.html","searchKeys":["matchOrdinal","val Node<TypeSafeJunction<*>>.matchOrdinal: Int","io.github.aeckar.parsing.matchOrdinal"]},{"name":"val Node<out ImplicitJunction<*>>.matchOrdinal: Int","description":"io.github.aeckar.parsing.matchOrdinal","location":"core/io.github.aeckar.parsing/match-ordinal.html","searchKeys":["matchOrdinal","val Node<out ImplicitJunction<*>>.matchOrdinal: Int","io.github.aeckar.parsing.matchOrdinal"]},{"name":"val name: String","description":"io.github.aeckar.parsing.Token.name","location":"core/io.github.aeckar.parsing/-token/name.html","searchKeys":["name","val name: String","io.github.aeckar.parsing.Token.name"]},{"name":"val recovery: Symbol","description":"io.github.aeckar.parsing.LexerParserDefinition.recovery","location":"core/io.github.aeckar.parsing/-lexer-parser-definition/recovery.html","searchKeys":["recovery","val recovery: Symbol","io.github.aeckar.parsing.LexerParserDefinition.recovery"]},{"name":"val skip: MutableList<NamedSymbol<LexerSymbol>>","description":"io.github.aeckar.parsing.LexerParserDefinition.skip","location":"core/io.github.aeckar.parsing/-lexer-parser-definition/skip.html","searchKeys":["skip","val skip: MutableList<NamedSymbol<LexerSymbol>>","io.github.aeckar.parsing.LexerParserDefinition.skip"]},{"name":"val substring: String","description":"io.github.aeckar.parsing.Node.substring","location":"core/io.github.aeckar.parsing/-node/substring.html","searchKeys":["substring","val substring: String","io.github.aeckar.parsing.Node.substring"]},{"name":"val substring: String","description":"io.github.aeckar.parsing.Token.substring","location":"core/io.github.aeckar.parsing/-token/substring.html","searchKeys":["substring","val substring: String","io.github.aeckar.parsing.Token.substring"]},{"name":"val tokens: List<Token>","description":"io.github.aeckar.parsing.IllegalTokenException.tokens","location":"core/io.github.aeckar.parsing/-illegal-token-exception/tokens.html","searchKeys":["tokens","val tokens: List<Token>","io.github.aeckar.parsing.IllegalTokenException.tokens"]},{"name":"var <TypeSafeT : TypeSafeSymbol<*, *>, TypeUnsafeT : TypeUnsafeSymbol<out TypeSafeT, out TypeUnsafeT>> NamedSymbol<out TypeUnsafeT>.actual: TypeSafeT","description":"io.github.aeckar.parsing.ParserDefinition.actual","location":"core/io.github.aeckar.parsing/-parser-definition/actual.html","searchKeys":["actual","var <TypeSafeT : TypeSafeSymbol<*, *>, TypeUnsafeT : TypeUnsafeSymbol<out TypeSafeT, out TypeUnsafeT>> NamedSymbol<out TypeUnsafeT>.actual: TypeSafeT","io.github.aeckar.parsing.ParserDefinition.actual"]},{"name":"var field: FieldT?","description":"io.github.aeckar.parsing.utils.OnceAssignable.field","location":"core/io.github.aeckar.parsing.utils/-once-assignable/field.html","searchKeys":["field","var field: FieldT?","io.github.aeckar.parsing.utils.OnceAssignable.field"]},{"name":"var skip: Symbol","description":"io.github.aeckar.parsing.LexerlessParserDefinition.skip","location":"core/io.github.aeckar.parsing/-lexerless-parser-definition/skip.html","searchKeys":["skip","var skip: Symbol","io.github.aeckar.parsing.LexerlessParserDefinition.skip"]},{"name":"var start: Symbol","description":"io.github.aeckar.parsing.ParserDefinition.start","location":"core/io.github.aeckar.parsing/-parser-definition/start.html","searchKeys":["start","var start: Symbol","io.github.aeckar.parsing.ParserDefinition.start"]}]